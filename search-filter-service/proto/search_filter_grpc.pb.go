// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/search_filter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchFilterService_SearchEmails_FullMethodName = "/SearchFilterService/SearchEmails"
	SearchFilterService_CreateFilter_FullMethodName = "/SearchFilterService/CreateFilter"
	SearchFilterService_ApplyFilters_FullMethodName = "/SearchFilterService/ApplyFilters"
)

// SearchFilterServiceClient is the client API for SearchFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchFilterServiceClient interface {
	SearchEmails(ctx context.Context, in *SearchEmailsRequest, opts ...grpc.CallOption) (*SearchEmailsResponse, error)
	CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*CreateFilterResponse, error)
	ApplyFilters(ctx context.Context, in *ApplyFiltersRequest, opts ...grpc.CallOption) (*ApplyFiltersResponse, error)
}

type searchFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchFilterServiceClient(cc grpc.ClientConnInterface) SearchFilterServiceClient {
	return &searchFilterServiceClient{cc}
}

func (c *searchFilterServiceClient) SearchEmails(ctx context.Context, in *SearchEmailsRequest, opts ...grpc.CallOption) (*SearchEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchEmailsResponse)
	err := c.cc.Invoke(ctx, SearchFilterService_SearchEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchFilterServiceClient) CreateFilter(ctx context.Context, in *CreateFilterRequest, opts ...grpc.CallOption) (*CreateFilterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFilterResponse)
	err := c.cc.Invoke(ctx, SearchFilterService_CreateFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchFilterServiceClient) ApplyFilters(ctx context.Context, in *ApplyFiltersRequest, opts ...grpc.CallOption) (*ApplyFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyFiltersResponse)
	err := c.cc.Invoke(ctx, SearchFilterService_ApplyFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchFilterServiceServer is the server API for SearchFilterService service.
// All implementations must embed UnimplementedSearchFilterServiceServer
// for forward compatibility.
type SearchFilterServiceServer interface {
	SearchEmails(context.Context, *SearchEmailsRequest) (*SearchEmailsResponse, error)
	CreateFilter(context.Context, *CreateFilterRequest) (*CreateFilterResponse, error)
	ApplyFilters(context.Context, *ApplyFiltersRequest) (*ApplyFiltersResponse, error)
	mustEmbedUnimplementedSearchFilterServiceServer()
}

// UnimplementedSearchFilterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchFilterServiceServer struct{}

func (UnimplementedSearchFilterServiceServer) SearchEmails(context.Context, *SearchEmailsRequest) (*SearchEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEmails not implemented")
}
func (UnimplementedSearchFilterServiceServer) CreateFilter(context.Context, *CreateFilterRequest) (*CreateFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilter not implemented")
}
func (UnimplementedSearchFilterServiceServer) ApplyFilters(context.Context, *ApplyFiltersRequest) (*ApplyFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFilters not implemented")
}
func (UnimplementedSearchFilterServiceServer) mustEmbedUnimplementedSearchFilterServiceServer() {}
func (UnimplementedSearchFilterServiceServer) testEmbeddedByValue()                             {}

// UnsafeSearchFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchFilterServiceServer will
// result in compilation errors.
type UnsafeSearchFilterServiceServer interface {
	mustEmbedUnimplementedSearchFilterServiceServer()
}

func RegisterSearchFilterServiceServer(s grpc.ServiceRegistrar, srv SearchFilterServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchFilterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchFilterService_ServiceDesc, srv)
}

func _SearchFilterService_SearchEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchFilterServiceServer).SearchEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchFilterService_SearchEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchFilterServiceServer).SearchEmails(ctx, req.(*SearchEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchFilterService_CreateFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchFilterServiceServer).CreateFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchFilterService_CreateFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchFilterServiceServer).CreateFilter(ctx, req.(*CreateFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchFilterService_ApplyFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchFilterServiceServer).ApplyFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchFilterService_ApplyFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchFilterServiceServer).ApplyFilters(ctx, req.(*ApplyFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchFilterService_ServiceDesc is the grpc.ServiceDesc for SearchFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchFilterService",
	HandlerType: (*SearchFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchEmails",
			Handler:    _SearchFilterService_SearchEmails_Handler,
		},
		{
			MethodName: "CreateFilter",
			Handler:    _SearchFilterService_CreateFilter_Handler,
		},
		{
			MethodName: "ApplyFilters",
			Handler:    _SearchFilterService_ApplyFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/search_filter.proto",
}
